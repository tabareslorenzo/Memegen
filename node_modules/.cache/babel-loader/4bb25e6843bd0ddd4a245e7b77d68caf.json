{"ast":null,"code":"var _jsxFileName = \"/Users/tabareslorenz/Documents/page/memes/src/components/Create.js\";\nimport React, { Component } from 'react';\nimport { Link } from 'react-router-dom';\nimport PropTypes from 'prop-types';\nimport axios from 'axios';\nimport './image.css';\nimport Addtext from './Addtext';\nimport Text from './Text';\nimport { saveSvgAsPng } from 'save-svg-as-png';\nimport { svgAsPngUri } from 'save-svg-as-png';\nimport Button from 'react-bootstrap/Button';\n\nclass Create extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      text: [{\n        string: '',\n        xloc: 0,\n        yloc: 0,\n        id: 0,\n        mving: false\n      }],\n      loggedin: false\n    };\n    this.selected = false;\n    this.moving = false;\n\n    this.changeloc = (e, id) => {\n      var x = id; //var y  = parseInt(e.target.id);\n      // console.log(e.target);\n      // console.log(\"change!!!\");\n      // console.log(e.clientX);\n      // console.log(e.clientY);\n      // txt.xloc = e.clientX;\n      // txt.yloc = e.clientY;\n      // this.state.text.map(txt => (console.log(txt.xloc)));\n      //console.log(\"change!!!\");\n      //addEventListener('mousemove', (event) => this.handleMouseMove(event, type));\n      //                        document.addEventListener('mousemove', (event) => this.changeloc2(event, txt.id))\n\n      this.setState({\n        text: this.state.text.map(txt => {\n          if (txt.id == id) {\n            if (e.type === 'mousedown' && this.selected === false) {\n              console.log(id);\n              this.moving = true;\n              document.addEventListener('mousemove', event => this.changeloc(event, txt.id), true);\n              this.selected = true;\n              txt.mving = true;\n              console.log(e.clientX);\n              console.log(e.clientY);\n              console.log(txt.xloc);\n              console.log(txt.yloc);\n              txt.xloc = e.clientX;\n              txt.yloc = e.clientY;\n              console.log(txt.xloc);\n              console.log(txt.yloc);\n            }\n\n            if (e.type === 'mousemove' && txt.mving === true) {\n              //console.log(id);\n              // console.log(this.moving);\n              document.removeEventListener('mousemove', event => this.changeloc, true);\n              console.log(e.clientX);\n              console.log(e.clientY);\n              console.log(txt.xloc);\n              console.log(txt.yloc);\n              txt.xloc = e.clientX;\n              txt.yloc = e.clientY;\n            }\n          }\n\n          return txt;\n        })\n      }); // this.state.text.map(txt => (console.log(txt.xloc)));\n    };\n\n    this.stopchange = (e, id) => {\n      console.log(\"up\");\n      this.moving = false;\n      this.setState({\n        text: this.state.text.map(txt => {\n          document.removeEventListener('mousemove', this.changeloc);\n          document.removeEventListener('mousedown', this.changeloc);\n          txt.mving = false;\n\n          if (txt.id === id) {\n            txt.xloc = e.clientX;\n            txt.yloc = e.clientY;\n            document.removeEventListener('mousemove', this.changeloc);\n            document.removeEventListener('mousedown', this.changeloc);\n            this.selected = false;\n            txt.mving = false;\n          } //console.log(document.EventTarget;\n\n\n          return txt;\n        })\n      });\n    };\n\n    this.addtext = txt => {\n      this.setState({\n        text: [...this.state.text, txt]\n      });\n    };\n\n    this.resetText = () => {\n      var txts = this.state.text;\n      console.log(\"yrp\");\n      this.setState({\n        text: txts.filter(txt => false)\n      });\n    };\n\n    this.download = () => {\n      saveSvgAsPng(document.getElementById('meme'), \"diagram.png\"); // svgAsPngUri(document.getElementById('meme')).then(uri => console.log(\"good\"));\n\n      return;\n    };\n\n    this.save = () => {\n      //this.props.addmeme(uri)\n      //saveSvgAsPng(document.getElementById('meme'), \"diagram.png\");\n      var newMeme;\n      console.log(svgAsPngUri(document.getElementById('meme')));\n      svgAsPngUri(document.getElementById('meme')).then(uri => this.dataready(uri));\n      return;\n    };\n\n    this.dataready = str => {\n      var min = 0;\n      var max = 10000;\n      var random = Math.floor(Math.random() * (+max - +min) + +min);\n      console.log(typeof str);\n      console.log(typeof random);\n      const newMeme = {\n        \"meme_url\": \"str\",\n        \"meme_id\": random\n      }; // axios.post('http://localhost:4000/memes/add', newMeme).then(res => console.log(res.data));\n\n      var token = localStorage.getItem('token');\n      token = token.substring(6, token.length);\n      const user = axios.create({\n        baseURL: 'http://localhost:4000/users/addmeme',\n        timeout: 1000,\n        headers: {\n          'Content-Type': 'application/json',\n          'Authorization': \"Bearer \" + token\n        }\n      });\n      user.post('', {\n        \"meme_url\": str,\n        \"meme_id\": random\n      }).then(response => {\n        // this.setState({savedmemes: response.data.memes})\n        // this.setState({savedmemes: [...this.state.savedmemes.filter(savedmeme => savedmeme.meme_url !== undefined)]})\n        // this.setState({savedmemes: [...this.state.savedmemes.filter(savedmeme => savedmeme.meme_url.length > 20)]})\n        console.log(response);\n      }).catch(function (error) {\n        console.log(error);\n      }); // let strs = localStorage.getItem('strs');\n      // let arr = [String];\n      // if(strs){\n      //       arr = JSON.parse(strs);\n      //       arr.push(newMeme.meme_url);\n      //       localStorage.setItem('strs', JSON.stringify(arr));\n      // }\n      // else{\n      //       arr=[];\n      //       arr.push(newMeme.meme_url);\n      //       localStorage.setItem('strs', JSON.stringify(arr));\n      // }\n      // localStorage.setItem(newMeme.meme_id, newMeme.meme_url);\n    };\n\n    this.yy = 1;\n    this.txtt = document.getElementsByClassName(\"txtloc\");\n    this.num = 15;\n    this.str = this.num.toString() + \"100\";\n  }\n\n  componentDidMount() {\n    // console.log(this.state.loggedin);\n    this.setState({\n      loggin: false\n    }); // console.log(this.state);\n\n    var token = localStorage.getItem('token'); // console.log(token);\n\n    if (token) {\n      token = token.substring(6, token.length);\n      console.log(\"whatwhat\");\n      const user = axios.create({\n        baseURL: 'http://localhost:4000/users/meme',\n        timeout: 1000,\n        headers: {\n          'Content-Type': 'application/json',\n          'Authorization': \"Bearer \" + token\n        }\n      });\n      user.get().then(response => {\n        this.setState({\n          loggedin: true\n        });\n        console.log(response);\n      }).catch(function (error) {\n        console.log(error);\n      });\n    }\n  }\n\n  // getDerivedStateFromProps(this.props.curImage, this.state);\n  // console.log(this.txtt.top);\n  render() {\n    this.txtt.top = 100 + 'px'; //console.log(this.str);\n    //this.txts = this.state.text;\n    //console.log(this.state.text[this.state.text.length-1])\n\n    if (this.props.curImage.empty) {\n      return React.createElement(\"h3\", {\n        align: \"center\",\n        style: headStyle,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 231\n        },\n        __self: this\n      }, \"Select a meme to start creating memes\");\n    } else if (!this.state.loggedin) {\n      // console.log(this.state.loggedin);\n      return React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 237\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"container\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 238\n        },\n        __self: this\n      }, React.createElement(Addtext, {\n        addtext: this.addtext,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 239\n        },\n        __self: this\n      }), React.createElement(\"svg\", {\n        id: \"meme\",\n        className: \"container-svg\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 241\n        },\n        __self: this\n      }, React.createElement(\"image\", {\n        xlinkHref: this.props.curImage.url,\n        width: \"100%\",\n        height: \"100%\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 243\n        },\n        __self: this\n      }), this.state.text.map(txt => React.createElement(\"text\", {\n        id: txt.id,\n        x: txt.xloc,\n        y: txt.yloc,\n        onMouseDown: event => this.changeloc(event, txt.id),\n        onMouseUp: event => this.stopchange(event, txt.id),\n        style: txtStyle,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 245\n        },\n        __self: this\n      }, txt.string))), React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 251\n        },\n        __self: this\n      }, React.createElement(Button, {\n        variant: \"outline-primary\",\n        size: \"sm\",\n        onClick: this.download,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 252\n        },\n        __self: this\n      }, \"Download\"), React.createElement(Button, {\n        variant: \"outline-primary\",\n        size: \"sm\",\n        onClick: this.resetText,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 253\n        },\n        __self: this\n      }, \"Reset\"))), spacing);\n    } else {\n      return React.createElement(\"div\", {\n        className: \"container\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 265\n        },\n        __self: this\n      }, React.createElement(Addtext, {\n        addtext: this.addtext,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 266\n        },\n        __self: this\n      }), React.createElement(\"svg\", {\n        id: \"meme\",\n        className: \"container-svg\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 268\n        },\n        __self: this\n      }, React.createElement(\"image\", {\n        xlinkHref: this.props.curImage.url,\n        width: \"100%\",\n        height: \"100%\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 270\n        },\n        __self: this\n      }), this.state.text.map(txt => React.createElement(\"text\", {\n        id: txt.id,\n        x: txt.xloc,\n        y: txt.yloc,\n        onMouseDown: event => this.changeloc(event, txt.id),\n        onMouseUp: event => this.stopchange(event, txt.id),\n        style: txtStyle,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 272\n        },\n        __self: this\n      }, txt.string))), React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 278\n        },\n        __self: this\n      }, React.createElement(\"button\", {\n        className: \"btn-container\",\n        style: btnStyle,\n        onClick: this.download,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 280\n        },\n        __self: this\n      }, \"Download\"), React.createElement(\"button\", {\n        className: \"btn-container\",\n        style: btnStyle,\n        onClick: this.save,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 281\n        },\n        __self: this\n      }, \"Save\"), React.createElement(\"button\", {\n        className: \"btn-container\",\n        style: btnStyle,\n        onClick: this.resetText,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 282\n        },\n        __self: this\n      }, \"Reset\")));\n    }\n  }\n\n} //PropTypes\n\n\nCreate.proTypes = {\n  curImage: PropTypes.object.isRequired\n};\nconst btnStyle = {\n  left: '100%',\n  backgroundColor: '#0033cc',\n  color: '#fff',\n  border: '10px',\n  padding: '5px 8px',\n  cursor: 'pointer',\n  float: 'right'\n};\nconst txtStyle = {\n  fontFamily: \"Impact\",\n  fill: \"#FFF\",\n  stroke: \"#000\",\n  fontSize: '30px'\n};\n/*\n\nmargin-left: auto;\nmargin-right: auto;\n*/\n\nconst headStyle = {\n  align: \"center\" // fontFamily: \"Impact\",\n  // fill: \"#FFF\",\n  // stroke: \"#000\",\n  // fontSize:'30px',\n\n};\nconst spacing = React.createElement(\"div\", {\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 328\n  },\n  __self: this\n}, React.createElement(\"br\", {\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 328\n  },\n  __self: this\n}), React.createElement(\"br\", {\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 328\n  },\n  __self: this\n}), React.createElement(\"br\", {\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 328\n  },\n  __self: this\n}));\nexport default Create; // this.txts = this.state.text;\n// console.log(this.state.text[this.state.text.length-1])\n// return (\n// <div className=\"container\">\n//       <Addtext addtext={this.addtext}></Addtext>\n//       <img src={this.props.curImage.url}></img>\n//       <ol>\n//       {this.txts.map(txt => ( <li>{txt}</li>))}\n//       </ol>\n// <button className=\"btn-container\" style={btnStyle} onClick={this.download}>Download</button>\n// <button className=\"btn-container\" style={btnStyle} onClick={this.resetText}>Reset</button>\n//\n//\n//\n// </div>\n// );<canvas id=\"canvas\"></canvas>\n//<img src={this.props.curImage.url}></img>\n//{this.txts.map(txt => ( <Text key={txt.id} text={txt}/>))}\n//{this.txts.map(txt => ( <text x=\"10\" y=\"200\" className=\"txtloc\">{txt.string}</text>))}","map":{"version":3,"sources":["/Users/tabareslorenz/Documents/page/memes/src/components/Create.js"],"names":["React","Component","Link","PropTypes","axios","Addtext","Text","saveSvgAsPng","svgAsPngUri","Button","Create","state","text","string","xloc","yloc","id","mving","loggedin","selected","moving","changeloc","e","x","setState","map","txt","type","console","log","document","addEventListener","event","clientX","clientY","removeEventListener","stopchange","addtext","resetText","txts","filter","download","getElementById","save","newMeme","then","uri","dataready","str","min","max","random","Math","floor","token","localStorage","getItem","substring","length","user","create","baseURL","timeout","headers","post","response","catch","error","yy","txtt","getElementsByClassName","num","toString","componentDidMount","loggin","get","render","top","props","curImage","empty","headStyle","url","txtStyle","spacing","btnStyle","proTypes","object","isRequired","left","backgroundColor","color","border","padding","cursor","float","fontFamily","fill","stroke","fontSize","align"],"mappings":"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","sourcesContent":["import React, {Component} from 'react';\nimport {Link} from 'react-router-dom';\nimport PropTypes from 'prop-types';\nimport axios from 'axios';\nimport './image.css';\nimport Addtext from './Addtext';\nimport Text from './Text';\nimport {saveSvgAsPng} from 'save-svg-as-png';\nimport {svgAsPngUri} from 'save-svg-as-png';\nimport Button from 'react-bootstrap/Button';\n\n\n\nclass Create extends Component{\n      state = {\n            text: [\n                  {\n                        string: '',\n                        xloc: 0,\n                        yloc: 0,\n                        id:0,\n                        mving:false,\n                  }\n            ],\n            loggedin: false,\n      }\n      componentDidMount(){\n            // console.log(this.state.loggedin);\n            this.setState({loggin: false});\n            // console.log(this.state);\n\n\n            var token = localStorage.getItem('token');\n\n            // console.log(token);\n            if(token){\n                  token = token.substring(6, token.length);\n                  console.log(\"whatwhat\");\n                  const user = axios.create({\n                        baseURL: 'http://localhost:4000/users/meme',\n                        timeout: 1000,\n                        headers: {'Content-Type': 'application/json', 'Authorization': \"Bearer \" + token}\n\n                  });\n                  user.get()\n                        .then(response => {this.setState({loggedin: true}); console.log(response);})\n                        .catch(function(error){\n                              console.log(error);\n                        })\n            }\n      }\n      selected = false\n      moving = false\n      changeloc = (e, id) => {\n            var x = id;\n            //var y  = parseInt(e.target.id);\n            // console.log(e.target);\n            // console.log(\"change!!!\");\n            // console.log(e.clientX);\n            // console.log(e.clientY);\n            // txt.xloc = e.clientX;\n            // txt.yloc = e.clientY;\n            // this.state.text.map(txt => (console.log(txt.xloc)));\n            //console.log(\"change!!!\");\n            //addEventListener('mousemove', (event) => this.handleMouseMove(event, type));\n            //                        document.addEventListener('mousemove', (event) => this.changeloc2(event, txt.id))\n\n            this.setState({text: this.state.text.map(txt=> {\n                  if(txt.id == id)\n                  {\n\n\n                        if(e.type === 'mousedown' && this.selected === false)\n                        {\n                              console.log(id);\n                              this.moving = true\n                              document.addEventListener('mousemove', (event) => this.changeloc(event, txt.id), true)\n                              this.selected = true\n                              txt.mving = true\n                              console.log(e.clientX);\n                              console.log(e.clientY);\n                              console.log(txt.xloc);\n                              console.log(txt.yloc);\n                              txt.xloc = e.clientX\n                              txt.yloc = e.clientY\n                              console.log(txt.xloc);\n                              console.log(txt.yloc);\n\n\n\n                        }\n                        if(e.type === 'mousemove' && txt.mving === true)\n                        {\n                              //console.log(id);\n                              // console.log(this.moving);\n                              document.removeEventListener('mousemove', (event) => this.changeloc, true)\n                              console.log(e.clientX);\n                              console.log(e.clientY);\n                              console.log(txt.xloc);\n                              console.log(txt.yloc);\n                              txt.xloc = e.clientX\n                              txt.yloc = e.clientY\n                        }\n\n                  }\n                  return txt;\n\n            })});\n\n            // this.state.text.map(txt => (console.log(txt.xloc)));\n\n      }\n      stopchange= (e, id) => {\n            console.log(\"up\");\n            this.moving = false;\n            this.setState({text: this.state.text.map(txt=> {\n                  document.removeEventListener('mousemove', this.changeloc)\n                  document.removeEventListener('mousedown', this.changeloc)\n                  txt.mving = false\n                  if(txt.id === id)\n                  {\n                        txt.xloc = e.clientX\n                        txt.yloc = e.clientY\n                        document.removeEventListener('mousemove', this.changeloc)\n                        document.removeEventListener('mousedown', this.changeloc)\n                        this.selected = false\n                        txt.mving = false\n\n\n                  }\n                  //console.log(document.EventTarget;\n                  return txt;\n\n            })});\n      }\n\n      addtext = (txt) => {\n            this.setState({text: [...this.state.text, txt]})\n      }\n      resetText = () => {\n            var txts = this.state.text;\n            console.log(\"yrp\");\n            this.setState({text: txts.filter(txt=> false) });\n      }\n\n      download = () =>\n      {\n            saveSvgAsPng(document.getElementById('meme'), \"diagram.png\");\n            // svgAsPngUri(document.getElementById('meme')).then(uri => console.log(\"good\"));\n            return;\n\n      }\n      save = () =>\n      {\n            //this.props.addmeme(uri)\n            //saveSvgAsPng(document.getElementById('meme'), \"diagram.png\");\n            var newMeme;\n            console.log(svgAsPngUri(document.getElementById('meme')));\n            svgAsPngUri(document.getElementById('meme')).then(uri => this.dataready(uri));\n            return;\n      }\n      dataready = (str) =>\n      {\n            var min=0;\n            var max=10000;\n            var random = Math.floor(Math.random() * (+max - +min) + +min);\n            console.log(typeof str);\n            console.log(typeof random);\n            const newMeme =\n            {\n                  \"meme_url\": \"str\",\n                  \"meme_id\": random\n            }\n            // axios.post('http://localhost:4000/memes/add', newMeme).then(res => console.log(res.data));\n            var token = localStorage.getItem('token');\n            token = token.substring(6, token.length);\n            const user = axios.create({\n                  baseURL: 'http://localhost:4000/users/addmeme',\n                  timeout: 1000,\n                  headers: {'Content-Type': 'application/json', 'Authorization': \"Bearer \" + token},\n\n            });\n            user.post('',{\n                  \"meme_url\": str,\n                  \"meme_id\": random\n            })\n                  .then(response => {\n                        // this.setState({savedmemes: response.data.memes})\n                        // this.setState({savedmemes: [...this.state.savedmemes.filter(savedmeme => savedmeme.meme_url !== undefined)]})\n                        // this.setState({savedmemes: [...this.state.savedmemes.filter(savedmeme => savedmeme.meme_url.length > 20)]})\nconsole.log(response);\n                  })\n                  .catch(function(error){\n                        console.log(error);\n                  })\n            // let strs = localStorage.getItem('strs');\n            // let arr = [String];\n            // if(strs){\n            //       arr = JSON.parse(strs);\n            //       arr.push(newMeme.meme_url);\n            //       localStorage.setItem('strs', JSON.stringify(arr));\n            // }\n            // else{\n            //       arr=[];\n            //       arr.push(newMeme.meme_url);\n            //       localStorage.setItem('strs', JSON.stringify(arr));\n            // }\n            // localStorage.setItem(newMeme.meme_id, newMeme.meme_url);\n\n      }\n      // txts = this.;\n      yy = 1;\n      //\n      txtt = document.getElementsByClassName(\"txtloc\");\n      num = 15;\n      str = this.num.toString() + \"100\";\n      // getDerivedStateFromProps(this.props.curImage, this.state);\n\n\n      // console.log(this.txtt.top);\n\n      render()\n      {\n            this.txtt.top = 100 + 'px';\n            //console.log(this.str);\n            //this.txts = this.state.text;\n\n            //console.log(this.state.text[this.state.text.length-1])\n            if(this.props.curImage.empty)\n            {\n                  return(<h3 align=\"center\" style={headStyle}>Select a meme to start creating memes</h3>);\n            }\n            else if(!this.state.loggedin)\n            {\n                  // console.log(this.state.loggedin);\n                  return (\n                  <div>\n                        <div className=\"container\">\n                              <Addtext addtext={this.addtext}></Addtext>\n\n                              <svg id='meme' className=\"container-svg\">\n\n                              <image  xlinkHref= {this.props.curImage.url} width=\"100%\" height=\"100%\"></image>\n\n                              {this.state.text.map(txt => (<text id={txt.id} x={txt.xloc} y={txt.yloc} onMouseDown={event => this.changeloc(event,txt.id)} onMouseUp={event => this.stopchange(event,txt.id)} style={txtStyle}>{txt.string}</text>\n                        ))}\n\n\n\n                              </svg>\n                              <div>\n                                    <Button variant=\"outline-primary\" size=\"sm\" onClick={this.download}>Download</Button>\n                                    <Button variant=\"outline-primary\" size=\"sm\" onClick={this.resetText}>Reset</Button>\n                              </div>\n\n\n\n                        </div>\n                        {spacing}\n                  </div>\n                  );\n            }\n            else{\n                  return (\n                  <div className=\"container\">\n                        <Addtext addtext={this.addtext}></Addtext>\n\n                        <svg id='meme' className=\"container-svg\">\n\n                        <image  xlinkHref= {this.props.curImage.url} width=\"100%\" height=\"100%\"></image>\n\n                        {this.state.text.map(txt => (<text id={txt.id} x={txt.xloc} y={txt.yloc} onMouseDown={event => this.changeloc(event,txt.id)} onMouseUp={event => this.stopchange(event,txt.id)} style={txtStyle}>{txt.string}</text>\n                  ))}\n\n\n\n                        </svg>\n                        <div>\n\n                              <button className=\"btn-container\" style={btnStyle} onClick={this.download}>Download</button>\n                              <button className=\"btn-container\" style={btnStyle} onClick={this.save}>Save</button>\n                              <button className=\"btn-container\" style={btnStyle} onClick={this.resetText}>Reset</button>\n                        </div>\n\n\n                  </div>\n                  );\n\n            }\n\n\n      }\n\n}\n\n//PropTypes\nCreate.proTypes = {\n      curImage: PropTypes.object.isRequired\n}\nconst btnStyle = {\n      left: '100%',\n      backgroundColor: '#0033cc',\n      color: '#fff',\n      border: '10px',\n      padding: '5px 8px',\n      cursor: 'pointer',\n      float: 'right'\n}\n\nconst txtStyle = {\n      fontFamily: \"Impact\",\n      fill: \"#FFF\",\n      stroke: \"#000\",\n      fontSize:'30px',\n}\n/*\n\nmargin-left: auto;\nmargin-right: auto;\n*/\nconst headStyle = {\n      align: \"center\"\n      // fontFamily: \"Impact\",\n      // fill: \"#FFF\",\n      // stroke: \"#000\",\n      // fontSize:'30px',\n}\nconst spacing = <div><br /><br /><br /></div>;\nexport default Create;\n\n\n\n// this.txts = this.state.text;\n// console.log(this.state.text[this.state.text.length-1])\n// return (\n// <div className=\"container\">\n//       <Addtext addtext={this.addtext}></Addtext>\n//       <img src={this.props.curImage.url}></img>\n//       <ol>\n//       {this.txts.map(txt => ( <li>{txt}</li>))}\n//       </ol>\n// <button className=\"btn-container\" style={btnStyle} onClick={this.download}>Download</button>\n// <button className=\"btn-container\" style={btnStyle} onClick={this.resetText}>Reset</button>\n//\n//\n//\n// </div>\n// );<canvas id=\"canvas\"></canvas>\n//<img src={this.props.curImage.url}></img>\n//{this.txts.map(txt => ( <Text key={txt.id} text={txt}/>))}\n//{this.txts.map(txt => ( <text x=\"10\" y=\"200\" className=\"txtloc\">{txt.string}</text>))}\n"]},"metadata":{},"sourceType":"module"}