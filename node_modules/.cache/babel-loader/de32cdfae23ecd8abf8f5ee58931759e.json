{"ast":null,"code":"var _jsxFileName = \"/Users/tabareslorenz/Documents/page/memes/src/components/Savedmemes.js\";\nimport React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport axios from 'axios';\nimport './image.css';\nimport Base64String from 'lz-string';\n\nclass Savedmemes extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      savedmemes: [],\n      loggedin: false\n    };\n  }\n\n  componentDidMount() {\n    var token = localStorage.getItem('token');\n\n    if (token != null) {\n      token = token.substring(6, token.length);\n    }\n\n    console.log(\"whatwhat\");\n    console.log(typeof token);\n\n    if (token) {\n      console.log(\"whatwhat\");\n      const user = axios.create({\n        baseURL: 'http://localhost:4000/users/meme',\n        timeout: 1000,\n        headers: {\n          'Content-Type': 'application/json',\n          'Authorization': \"Bearer \" + token\n        }\n      });\n      user.get().then(response => {\n        //this.setState({savedmemes: response.data.memes});\n        // this.state.savedmemes.forEach(me => console.log(me.meme_url));\n        const promises = response.data.memes.map(async savedmeme => await Base64String.decompress(savedmeme.meme_url)); // const promises = this.setState({savedmemes: [...this.state.savedmemes.map(async savedmeme => await Base64String.decompress(savedmeme.meme_url)\n        // ({\n        //       meme_url:  function(){Base64String.decompress(savedmeme.meme_url)\n        //       console.log(Base64String.decompress(savedmeme.meme_url));},\n        //       meme_id: savedmeme.meme_id,\n        // })\n        // )]});\n        // this.setState({savedmemes: [...this.state.savedmemes.forEach(savedmeme => console.log(Base64String.decompress(savedmeme.meme_url)))]});\n\n        Promise.all(promises).then(response => {\n          this.setState({\n            savedmemes: response\n          });\n          console.log(response);\n        }); // this.setState({savedmemes: await Promise.all(promises)});\n\n        this.setState({\n          savedmemes: [...this.state.savedmemes.filter(savedmeme => savedmeme.meme_url !== undefined)]\n        });\n        this.setState({\n          savedmemes: [...this.state.savedmemes.filter(savedmeme => savedmeme.meme_url.length > 20)]\n        });\n        console.log(this.state.savedmemes);\n      }).catch(function (error) {\n        console.log(error);\n      });\n    } //\n    //              axios.post('http://localhost:4000/users/adduser', newUser, {\n    //         headers: {\n    //             'Content-Type': 'application/json'\n    //         }\n    // }).then(res => {console.log(res);}).catch(function(error){\n    //                         console.log(error.response);\n    //                   });\n    // axios.get('http://localhost:4000/users/')\n    //       .then(response => {\n    //             console.log(response);\n    //       })\n    //       .catch(function(error){\n    //             console.log(error);\n    //       })\n    //             if(token){\n    //                   this.setState({loggedin: true});\n    //                   const user = axios.create({\n    //                         baseURL: 'http://localhost:4000/users/meme',\n    //                         timeout: 1000,\n    //                         headers: {'Content-Type': 'application/json', 'Authorization': token}\n    //\n    //                   });\n    //                   user.get()\n    //                         .then(response => {\n    //                               this.setState({savedmemes: response.data.memes})\n    //                               this.setState({savedmemes: [...this.state.savedmemes.filter(savedmeme => savedmeme.meme_url !== undefined)]})\n    //                               this.setState({savedmemes: [...this.state.savedmemes.filter(savedmeme => savedmeme.meme_url.length > 20)]})\n    // console.log(response.data.memes);\n    //                         })\n    //                         .catch(function(error){\n    //                               console.log(error);\n    //                         })\n    //\n    //\n    //\n    //             }\n    // axios.get('http://localhost:4000/memes/')\n    //       .then(response => {\n    //             this.setState({savedmemes: response.data})\n    //             this.setState({savedmemes: [...this.state.savedmemes.filter(savedmeme => savedmeme.meme_url !== undefined)]})\n    //             this.setState({savedmemes: [...this.state.savedmemes.filter(savedmeme => savedmeme.meme_url.length > 20)]})\n    //\n    //       })\n    //       .catch(function(error){\n    //             console.log(error);\n    //       })\n    // axios.get('http://localhost:4000/memes/users')\n    //       .then(response => {\n    //             console.log(\"response.data\");\n    //             console.log(response.data);\n    //\n    //       })\n    //       .catch(function(error){\n    //             console.log(error);\n    //       })\n    // let arr = JSON.parse(localStorage.getItem('strs'));\n    // const newMeme =\n    // {\n    //       meme_url: '',\n    //       meme_id: 12\n    // }\n    // let strs = [(typeof newMeme)];\n    // arr.map(ar => strs.push({\n    //       meme_url: ar,\n    //       meme_id: 12\n    // }));\n    // console.log(typeof strs);\n    // console.log(strs);\n    // strs.map(str => this.setState({savedmemes: [...this.state.savedmemes, str]}));\n    // this.state.savedmemes.map(saved => {console.log(saved);});\n\n  }\n\n  render() {\n    var smemes = this.state.savedmemes;\n\n    if (this.props.isloggedin) {\n      return React.createElement(\"p\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 141\n        },\n        __self: this\n      }, \"log in\");\n    }\n\n    return smemes.map(smeme => React.createElement(\"img\", {\n      className: \"savedMemes\",\n      style: savedStyle,\n      src: smeme,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 145\n      },\n      __self: this\n    }));\n  }\n\n}\n\nSavedmemes.proTypes = {\n  savedmemes: PropTypes.array.isRequired\n};\nconst savedStyle = {\n  justifyContent: 'center'\n};\nexport default Savedmemes; // <div>\n// <div>\n//       {smemes.map((smeme) =>\n//       <img src={smeme.meme_url}></img>)}\n//\n// </div>\n// <button className=\"btn-container\"  ><Link to={`/login/`} >Home</Link></button>\n// </div>","map":{"version":3,"sources":["/Users/tabareslorenz/Documents/page/memes/src/components/Savedmemes.js"],"names":["React","Component","PropTypes","axios","Base64String","Savedmemes","constructor","props","state","savedmemes","loggedin","componentDidMount","token","localStorage","getItem","substring","length","console","log","user","create","baseURL","timeout","headers","get","then","response","promises","data","memes","map","savedmeme","decompress","meme_url","Promise","all","setState","filter","undefined","catch","error","render","smemes","isloggedin","smeme","savedStyle","proTypes","array","isRequired","justifyContent"],"mappings":"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","sourcesContent":["import React, {Component} from 'react';\nimport PropTypes from 'prop-types';\nimport axios from 'axios';\nimport './image.css';\nimport Base64String  from 'lz-string';\n\nclass Savedmemes extends Component {\n      constructor(props) {\n      super(props);\n      this.state = {savedmemes: [],\n      loggedin: false};\n      }\n      componentDidMount(){\n            var token = localStorage.getItem('token');\n            if(token != null)\n            {\n                  token = token.substring(6, token.length);\n            }\n\n\n            console.log(\"whatwhat\");\n            console.log(typeof token);\n            if(token){\n                  console.log(\"whatwhat\");\n                  const user = axios.create({\n                        baseURL: 'http://localhost:4000/users/meme',\n                        timeout: 1000,\n                        headers: {'Content-Type': 'application/json', 'Authorization': \"Bearer \" + token}\n\n                  });\n                  user.get()\n                        .then(response => {\n                        //this.setState({savedmemes: response.data.memes});\n                        // this.state.savedmemes.forEach(me => console.log(me.meme_url));\n                        const promises = response.data.memes.map(async savedmeme => await Base64String.decompress(savedmeme.meme_url));\n                        // const promises = this.setState({savedmemes: [...this.state.savedmemes.map(async savedmeme => await Base64String.decompress(savedmeme.meme_url)\n                        // ({\n                        //       meme_url:  function(){Base64String.decompress(savedmeme.meme_url)\n                        //       console.log(Base64String.decompress(savedmeme.meme_url));},\n                        //       meme_id: savedmeme.meme_id,\n                        // })\n                               // )]});\n                        // this.setState({savedmemes: [...this.state.savedmemes.forEach(savedmeme => console.log(Base64String.decompress(savedmeme.meme_url)))]});\n                        Promise.all(promises)\n                              .then(response =>\n                              {\n                                    this.setState({savedmemes: response});\n                                    console.log(response);\n                              })\n\n                        // this.setState({savedmemes: await Promise.all(promises)});\n                        this.setState({savedmemes: [...this.state.savedmemes.filter(savedmeme => savedmeme.meme_url !== undefined)]});\n                        this.setState({savedmemes: [...this.state.savedmemes.filter(savedmeme => savedmeme.meme_url.length > 20)]});\nconsole.log(this.state.savedmemes);\n\n\n\n                  })\n                        .catch(function(error){\n                              console.log(error);\n                        })\n            }\n\n//\n//              axios.post('http://localhost:4000/users/adduser', newUser, {\n//         headers: {\n//             'Content-Type': 'application/json'\n//         }\n// }).then(res => {console.log(res);}).catch(function(error){\n//                         console.log(error.response);\n//                   });\n            // axios.get('http://localhost:4000/users/')\n            //       .then(response => {\n            //             console.log(response);\n            //       })\n            //       .catch(function(error){\n            //             console.log(error);\n            //       })\n//             if(token){\n//                   this.setState({loggedin: true});\n//                   const user = axios.create({\n//                         baseURL: 'http://localhost:4000/users/meme',\n//                         timeout: 1000,\n//                         headers: {'Content-Type': 'application/json', 'Authorization': token}\n//\n//                   });\n//                   user.get()\n//                         .then(response => {\n//                               this.setState({savedmemes: response.data.memes})\n//                               this.setState({savedmemes: [...this.state.savedmemes.filter(savedmeme => savedmeme.meme_url !== undefined)]})\n//                               this.setState({savedmemes: [...this.state.savedmemes.filter(savedmeme => savedmeme.meme_url.length > 20)]})\n// console.log(response.data.memes);\n//                         })\n//                         .catch(function(error){\n//                               console.log(error);\n//                         })\n//\n//\n//\n//             }\n            // axios.get('http://localhost:4000/memes/')\n            //       .then(response => {\n            //             this.setState({savedmemes: response.data})\n            //             this.setState({savedmemes: [...this.state.savedmemes.filter(savedmeme => savedmeme.meme_url !== undefined)]})\n            //             this.setState({savedmemes: [...this.state.savedmemes.filter(savedmeme => savedmeme.meme_url.length > 20)]})\n            //\n            //       })\n            //       .catch(function(error){\n            //             console.log(error);\n            //       })\n            // axios.get('http://localhost:4000/memes/users')\n            //       .then(response => {\n            //             console.log(\"response.data\");\n            //             console.log(response.data);\n            //\n            //       })\n            //       .catch(function(error){\n            //             console.log(error);\n            //       })\n            // let arr = JSON.parse(localStorage.getItem('strs'));\n            // const newMeme =\n            // {\n            //       meme_url: '',\n            //       meme_id: 12\n            // }\n            // let strs = [(typeof newMeme)];\n            // arr.map(ar => strs.push({\n            //       meme_url: ar,\n            //       meme_id: 12\n            // }));\n            // console.log(typeof strs);\n            // console.log(strs);\n            // strs.map(str => this.setState({savedmemes: [...this.state.savedmemes, str]}));\n            // this.state.savedmemes.map(saved => {console.log(saved);});\n\n      }\n\n      render () {\n            var smemes = this.state.savedmemes;\n            if(this.props.isloggedin){\n                  return <p>log in</p>\n            }\n            return(\n\n                  smemes.map((smeme) => <img className=\"savedMemes\" style={savedStyle} src={smeme}></img>)\n\n            );\n\n      }\n}\n\nSavedmemes.proTypes = {\n      savedmemes: PropTypes.array.isRequired\n}\nconst savedStyle={\n\n      justifyContent: 'center'\n\n}\n\n\nexport default Savedmemes;\n// <div>\n// <div>\n//       {smemes.map((smeme) =>\n//       <img src={smeme.meme_url}></img>)}\n//\n// </div>\n// <button className=\"btn-container\"  ><Link to={`/login/`} >Home</Link></button>\n// </div>\n"]},"metadata":{},"sourceType":"module"}